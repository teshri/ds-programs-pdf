/**
 *  Perform the following Stack operations using Linked 
 *  List Representation:
 *    (a)	Push
 *    (b)	Pop
 *    (c)	Clear
 * 
 *  Written by Sudipto Ghosh for the University of Delhi
 */

#include <iostream> 
using namespace std; 
class Node 
{ 
public: 
 int data; 
 Node *next; 
}; 
Node *top; 
void push(int data) 
{ 

 Node *temp = new Node(); 
 
 if (!temp) 
 { 
 cout << "\nStack Overflow"; 
 exit(1); 
 } 
 temp->data = data; 
 temp->next = top; 
 top = temp; 
} 
int isEmpty() 
{ 
 return top == NULL; 
} 
int peek() 
{ 
 if (!isEmpty()) 
 return top->data; 
 else 
 cout << "\nStack is empty! "; 
 return -1; 
} 
void pop() 
{ 
 if (top == NULL) 
 { 
 cout << "\nStack Underflow" << endl; 
 exit(1); 
 } 
 else 
 { 
 top = top->next; 
 } 
} 
void display() 
{ 
 Node *temp; 
 if (top == NULL) 
 { 
 cout << "\nStack Underflow"; 
 exit(1); 
 } 
 else 
 { 
 temp = top; 
 while (temp != NULL) 
 { 
 cout << temp->data << "-> "; 
 temp = temp->next; 
 } 
 } 
} 
int main() 
{ 
 Node *head = NULL; 
 int ch, element; 
 cout << "---------------- Stack Operations -------------" << endl; 
 bool stop = false; 
 do 
 { 
 cout << "\n\nPush-- (1)\tPop -- (2)\nDisplay-- (3)\tPeek-- (4)\nisEmpty-- (5)\tExit--(6)\n "; 
 cout << "\nEnter your choice: "; 
 cin >> ch; 
 switch (ch) 
 { 
 case 1: 
 cout << "\nEnter the element : "; 
 cin >> element; 
 push(element); 
 cout << element << " is pushed\n "; 
 break; 
 case 2: 
 if (peek() != -1) 
 { 
 cout << peek() << " is Popped\n "; 
 pop(); 
 } 
 else 
 { 
 pop(); 
 } 
 break; 
 case 3: 
 cout << "\nCreated stack is: "; 
 display(); 
 break; 
 case 4: 
 cout << "\nTop element is : "; 
 cout << peek(); 
 break; 
 case 5: 
 if (isEmpty() == 0) 
 { 
 cout << "\nStack is not empty "; 
 } 
 else 
 { 
 cout << "\nStack is empty "; 
 } 
 break; 
 case 6: 
 stop = true; 
 break; 
 default: 
 cout << "Invalid option ! "; 
 break; 
 } 
 } while (stop != true); 
 return 0; 
}
