/**
 *  Perform the following Queue operations using Circular Linked
 *  List implementation (Use Templates):
 *    (a)	Enqueue
 *    (b)	Dequeue
 
 */
 #include <iostream> 
using namespace std; 
#define SIZE 10 
class deque 
{ 
 int a[20], f, r; 
public: 
 deque(); 
 void insert_at_beg(int); 
 void insert_at_end(int); 
 void delete_fr_front(); 
 void delete_fr_rear(); 
 void show(); 
 void userInput(); 
}; 
deque::deque() 
{ 
 f = -1; 
 r = -1; 
} 
void deque::insert_at_end(int i) 
{ 
 if (r >= SIZE - 1) 
 { 
 cout << "\n insertion is not possible, overflow!!!!"; 
 } 
 else 
 { 
 if (f == -1) 
 { 
 f++; 
 r++; 
 } 
 else 
 { 
 r = r + 1; 
 } 
 a[r] = i; 
 cout << "\nInserted item is " << a[r]; 
 } 
} 
void deque::insert_at_beg(int i) 
{ 
 if (f == -1) 
 { 
 f = 0; 
 a[++r] = i; 
 cout << "\n Inserted element is: " << i; 
 } 
 else if (f != 0) 
 { 
 a[--f] = i; 
 cout << "\n Inserted element is: " << i; 
 } 
 else 
 { 
 cout << "\n Insertion is not possible, overflow!!!"; 
 } 
} 
void deque::delete_fr_front() 
{ 
 if (f == -1) 
 { 
 cout << "deletion is not possible::deque is empty"; 
 return; 
 } 
 else 
 { 
 cout << "the deleted element is: " << a[f]; 
 if (f == r) 
 { 
 f = r = -1; 
 return; 
 } 
 else 
 f = f + 1; 
 } 
} 
void deque::delete_fr_rear() 
{ 
 if (f == -1) 
 { 
 cout << "deletion is not possible::deque is empty"; 
 return; 
 } 
 else 
 { 
 cout << "the deleted element is: " << a[r]; 
 if (f == r) 
 { 
 f = r = -1; 
 } 
 else 
 r = r - 1; 
 } 
} 
void deque::show() 
{ 
 if (f == -1) 
 { 
 cout << "deque is empty! "; 
 } 
 else 
 { 
 for (int i = f; i <= r; i++) 
 { 
 cout << a[i] << " "; 
 } 
 } 
} 
void deque::userInput() 
{ 
 int c, i; 
 deque d; 
 cout << "\n 1.Insert At Beginning"; 
 cout << "\n 2.Insert At End"; 
 cout << "\n 3.Show"; 
 cout << "\n 4.Deletion From Front"; 
 cout << "\n 5.Deletion From Rear"; 
 cout << "\n 6.Exit"; 
 do 
 { 
 cout << "\nEnter Your Choice :"; 
 cin >> c; 
 switch (c) 
 { 
 case 1: 
 cout << "Enter the element to be inserted: "; 
 cin >> i; 
 d.insert_at_beg(i); 
 cout << endl; 
 break; 
 case 2: 
 cout << "Enter the element to be inserted: "; 
 cin >> i; 
 d.insert_at_end(i); 
 cout << endl; 
 break; 
 case 3: 
 cout << "\nELEMENTS ARE : "; 
 d.show(); 
 cout << endl; 
 break; 
 case 4: 
 cout << "\nELEMENTS AFTER DELETING FROM FRONT : "; 
 d.delete_fr_front(); 
 cout << endl; 
 break; 
 case 5: 
 cout << "\nELEMENTS AFTER DELETING FROM REAR : "; 
 d.delete_fr_rear(); 
 cout << endl; 
 break; 
 case 6: 
 exit(1); 
 break; 
 default: 
 cout << "Invalid choice! "; 
 break; 
 } 
 } 
 while (c != 7); 
} 
int main() 
{ 
 deque x; 
 x.userInput(); 
} 
